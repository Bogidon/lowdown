#!/usr/bin/env ruby

require "lowdown"
include Lowdown

require "json"
require "optparse"

Celluloid.logger.level = Logger::WARN

options = { :payload => {}, :custom_data => {}, :pool_size => 1 }

OPTION_PARSER = OptionParser.new do |opts|
  opts.banner = "Usage: lowdown [options] <tokens â€¦>"

  opts.on("-v", "--version", "Print version") do |v|
    puts VERSION
    exit
  end

  opts.on("-m", "--alert ALERT", "Body of the alert to send in the push notification (the %d format code will be replaced by the notification ID)") do |alert|
    options[:alert] = alert
  end

  opts.on("-b", "--badge NUMBER", "Badge number to set with the push notification") do |badge|
    options[:badge] = badge.to_i
  end

  opts.on("-s", "--sound SOUND", "Sound to play with the notification") do |sound|
    options[:sound] = sound
  end

  opts.on("-x", "--[no-]content-available", "Indicates to the app that new content is available") do |available|
    options[:content_available] = available
  end

  opts.on("-d", "--data KEY=VALUE", "Passes custom data to payload") do |custom_data|
    key, value = custom_data.split("=", 2)
    options[:custom_data][key] = value
  end

  opts.on("-P", "--payload PAYLOAD", "JSON payload for notifications, merged with --alert, --badge, --sound, and --data") do |payload|
    options[:payload] = JSON.parse(payload)
  end

  opts.on("-t", "--topic TOPIC", "The topic for the notifications") do |topic|
    options[:topic] = topic
  end

  opts.on("-e", "--environment ENV", "Environment to send push notification (production or development), defaults to production if the certificate supports that or otherwise development") do |env|
    options[:env] = env
  end

  opts.on("-c", "--certificate CERTIFICATE", "Path to certificate (.pem) file") do |file|
    options[:certificate_file] = file
  end

  opts.on("-p", "--passphrase PASSPHRASE", "Certificate passphrase") do |passphrase|
    options[:certificate_passphrase] = passphrase
  end

  opts.on("-n", "--connections NUMBER", "Number of simultaneous connections to make") do |pool_size|
    options[:pool_size] = pool_size.to_i
  end

  opts.on("--debug", "Debug logging") do
    Celluloid.logger.level = Logger::INFO
  end

  opts.on("--verbose", "Verbose logging") do
    $CELLULOID_DEBUG = true
    Celluloid.logger.level = Logger::DEBUG
  end
end

OPTION_PARSER.parse!
tokens = ARGV

def help!(message)
  puts message
  puts
  puts OPTION_PARSER
  exit 1
end

certificate = nil
file, passphrase = options.values_at(:certificate_file, :certificate_passphrase)
unless file && File.exist?(file) && certificate = (Certificate.from_pem_data(File.read(file), passphrase) rescue nil)
  help! "A valid certificate path is required."
end

production = false
if options[:env]
  unless %w{ production development }.include?(options[:env])
    help! "Invalid environment specified."
  end
  production = options[:env] == "production"
else
  if certificate.production?
    production = true
  elsif certificate.development?
    production = false
  end
end

begin
  client = Client.production(production, certificate: certificate, pool_size: options[:pool_size])
rescue ArgumentError => e
  help! e.message
end

payload = options[:payload]
payload.merge!(options[:custom_data])
payload["alert"] = options[:alert] if options[:alert]
payload["badge"] = options[:badge] if options[:badge]
payload["sound"] = options[:sound] if options[:sound]
payload["content-available"] = options[:content_available] ? 1 : 0 if options.has_key?(:content_available)
if payload.empty?
  help! "No payload data specified."
end

if tokens.empty?
  help! "No device tokens specified."
end

notifications = tokens.map do |token|
  Notification.new(:token => token, :payload => payload.dup, :topic => options[:topic]).tap do |notification|
    notification.payload["alert"] = notification.payload["alert"] % notification.id
  end
end

client.connect do |group|
  notifications.each do |notification|
    group.send_notification(notification) do |response|
      Celluloid.logger.unknown "[#{notification.token} ##{notification.id}] #{response}"
    end
  end
end

